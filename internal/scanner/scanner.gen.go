//line scanner.rl:1
package scanner

import "github.com/influxdata/flux/internal/token"

//line scanner.rl:104

//line scanner.gen.go:13
var _flux_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 3, 1, 4,
	1, 7, 1, 8, 1, 9, 1, 24,
	1, 25, 1, 26, 1, 27, 1, 28,
	1, 29, 1, 30, 1, 31, 1, 32,
	1, 33, 1, 34, 1, 35, 1, 36,
	1, 37, 1, 38, 1, 39, 1, 40,
	1, 41, 1, 42, 1, 43, 1, 44,
	1, 46, 1, 47, 1, 48, 1, 49,
	1, 50, 1, 51, 1, 52, 1, 53,
	1, 54, 1, 55, 1, 56, 1, 57,
	1, 58, 1, 59, 1, 60, 2, 0,
	45, 2, 1, 2, 2, 4, 5, 2,
	4, 6, 2, 4, 10, 2, 4, 11,
	2, 4, 12, 2, 4, 13, 2, 4,
	14, 2, 4, 15, 2, 4, 16, 2,
	4, 17, 2, 4, 18, 2, 4, 19,
	2, 4, 20, 2, 4, 21, 2, 4,
	22, 2, 4, 23,
}

var _flux_key_offsets []int16 = []int16{
	0, 0, 2, 4, 6, 7, 10, 13,
	17, 19, 21, 22, 24, 26, 28, 30,
	31, 33, 35, 36, 38, 40, 42, 44,
	45, 47, 49, 52, 61, 72, 73, 74,
	77, 83, 83, 85, 87, 96, 103, 111,
	112, 114, 116, 120, 125, 134, 138, 144,
	155, 157, 159, 161, 166, 193, 197, 207,
	222, 236, 254, 267, 283, 291, 307, 320,
	341, 349, 363, 372, 386, 397, 409, 419,
	428, 437, 439, 442, 463, 469, 470, 476,
	484, 533, 538, 544, 548, 553, 555, 557,
	559, 566, 574, 581, 584, 588, 592, 594,
	596, 600, 604, 608, 614, 622, 626, 632,
	634, 636, 638, 644, 648, 652, 654, 656,
	660, 663, 667, 669, 673, 677, 687, 692,
	706, 722, 724, 726, 742, 747, 749, 751,
	753, 757, 761, 763, 767, 771, 781, 791,
	792, 803, 811, 814, 817, 821, 825, 827,
	830, 832, 832, 835, 837, 862, 864, 870,
	875, 877, 881, 885, 887, 892, 894, 898,
	900, 902, 904, 907, 909, 930, 932, 934,
	936, 947, 953, 955, 957, 959, 961, 965,
	969, 971, 973, 977, 979, 987, 995, 1012,
	1022, 1026, 1028, 1030, 1034, 1036, 1040, 1042,
	1046, 1051, 1053, 1062, 1066, 1076, 1082, 1084,
	1086, 1100, 1101, 1111, 1112, 1120, 1127, 1129,
	1132, 1134, 1136, 1138, 1141, 1144, 1147, 1149,
	1153, 1154, 1159, 1163, 1165, 1240, 1244, 1246,
	1248, 1249, 1261, 1262, 1266, 1271, 1274, 1279,
	1291, 1303, 1315, 1328, 1340, 1342, 1344, 1345,
	1388, 1432, 1476, 1520, 1564, 1608, 1652, 1697,
	1741, 1785, 1829, 1873, 1917, 1961, 2005, 2049,
	2093, 2137, 2181, 2225, 2269, 2313, 2357, 2401,
	2445,
}

var _flux_trans_keys []byte = []byte{
	10, 47, 61, 126, 10, 34, 10, 46,
	48, 57, 46, 48, 57, 45, 46, 48,
	57, 48, 57, 48, 57, 45, 48, 57,
	48, 57, 48, 57, 48, 57, 58, 48,
	57, 48, 57, 58, 48, 57, 48, 57,
	48, 57, 48, 57, 58, 48, 57, 48,
	57, 46, 48, 57, 100, 104, 109, 110,
	115, 117, 119, 121, 194, 100, 104, 109,
	110, 115, 117, 119, 121, 194, 48, 57,
	115, 181, 170, 181, 186, 128, 150, 152,
	182, 184, 255, 192, 255, 128, 255, 173,
	130, 133, 146, 159, 165, 171, 175, 255,
	133, 176, 180, 182, 183, 186, 189, 134,
	140, 136, 138, 142, 161, 163, 255, 182,
	130, 137, 164, 176, 151, 152, 154, 160,
	190, 136, 175, 192, 255, 135, 129, 130,
	132, 133, 144, 170, 176, 178, 144, 154,
	161, 191, 128, 151, 153, 158, 174, 255,
	148, 157, 160, 169, 172, 176, 185, 189,
	190, 192, 255, 144, 191, 141, 255, 178,
	255, 186, 138, 170, 180, 181, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189,
	190, 129, 185, 189, 255, 141, 143, 145,
	151, 164, 176, 179, 186, 192, 255, 178,
	129, 131, 133, 140, 143, 144, 147, 168,
	170, 176, 182, 185, 189, 255, 141, 158,
	133, 134, 137, 138, 143, 150, 152, 155,
	164, 175, 178, 255, 129, 131, 133, 138,
	143, 144, 147, 168, 170, 176, 178, 179,
	181, 182, 184, 185, 190, 255, 157, 131,
	134, 137, 138, 141, 144, 146, 152, 159,
	175, 182, 255, 129, 131, 133, 141, 143,
	145, 147, 168, 170, 176, 178, 179, 181,
	185, 189, 255, 134, 138, 141, 143, 145,
	159, 164, 255, 129, 131, 133, 140, 143,
	144, 147, 168, 170, 176, 178, 179, 181,
	185, 189, 191, 177, 128, 132, 135, 136,
	139, 140, 150, 151, 156, 157, 159, 163,
	156, 130, 131, 133, 138, 142, 144, 146,
	149, 153, 154, 158, 159, 163, 164, 168,
	170, 174, 185, 190, 191, 144, 151, 128,
	130, 134, 136, 138, 140, 129, 131, 133,
	140, 142, 144, 146, 168, 170, 179, 181,
	185, 189, 255, 133, 137, 151, 141, 148,
	154, 159, 164, 255, 130, 131, 133, 140,
	142, 144, 146, 168, 170, 179, 181, 185,
	189, 191, 158, 128, 132, 134, 136, 138,
	140, 149, 150, 160, 163, 130, 131, 133,
	140, 142, 144, 146, 168, 170, 185, 189,
	255, 133, 137, 141, 150, 152, 159, 164,
	185, 192, 255, 189, 130, 131, 133, 150,
	154, 177, 179, 187, 150, 128, 134, 143,
	148, 152, 159, 178, 179, 129, 186, 141,
	128, 134, 132, 138, 141, 165, 167, 129,
	130, 135, 136, 148, 151, 153, 159, 161,
	163, 170, 171, 173, 185, 187, 189, 134,
	141, 128, 132, 156, 157, 128, 128, 135,
	137, 172, 177, 191, 128, 129, 136, 139,
	144, 151, 153, 188, 128, 129, 130, 131,
	133, 134, 135, 137, 138, 139, 140, 141,
	142, 143, 144, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 164, 165, 166,
	167, 168, 172, 173, 174, 176, 177, 180,
	181, 182, 184, 188, 189, 190, 191, 132,
	136, 145, 152, 185, 187, 184, 128, 182,
	187, 191, 144, 162, 165, 168, 174, 255,
	135, 141, 143, 159, 187, 134, 143, 189,
	255, 154, 158, 163, 167, 186, 255, 137,
	151, 153, 142, 143, 158, 159, 137, 177,
	142, 143, 182, 183, 191, 255, 128, 130,
	133, 136, 150, 152, 255, 145, 150, 151,
	155, 158, 160, 255, 128, 143, 160, 255,
	181, 255, 129, 255, 173, 174, 183, 255,
	129, 154, 160, 255, 171, 173, 177, 255,
	128, 140, 142, 147, 160, 179, 128, 147,
	160, 172, 174, 176, 178, 179, 128, 179,
	182, 255, 137, 150, 152, 155, 157, 255,
	160, 255, 184, 255, 128, 170, 128, 156,
	160, 171, 176, 184, 144, 173, 176, 180,
	128, 169, 176, 255, 138, 255, 128, 155,
	128, 179, 181, 255, 132, 140, 255, 128,
	169, 174, 175, 128, 181, 141, 143, 154,
	189, 150, 151, 158, 159, 152, 154, 156,
	158, 134, 135, 142, 143, 190, 255, 190,
	128, 180, 182, 188, 130, 132, 134, 140,
	144, 147, 150, 155, 160, 172, 178, 180,
	182, 188, 129, 130, 132, 133, 134, 146,
	147, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 177, 191, 144, 148, 130, 135,
	149, 164, 166, 168, 138, 147, 153, 157,
	170, 173, 175, 185, 188, 191, 142, 133,
	137, 160, 255, 137, 255, 182, 255, 170,
	255, 128, 174, 176, 255, 159, 176, 190,
	255, 165, 255, 128, 165, 176, 255, 166,
	174, 176, 255, 128, 150, 160, 166, 168,
	174, 176, 182, 184, 190, 128, 134, 136,
	142, 144, 150, 152, 158, 160, 191, 175,
	128, 129, 130, 131, 132, 133, 134, 135,
	144, 145, 255, 133, 135, 161, 169, 177,
	181, 184, 188, 160, 151, 156, 187, 192,
	255, 133, 173, 177, 255, 143, 159, 184,
	255, 176, 191, 182, 183, 184, 182, 255,
	191, 192, 255, 132, 255, 128, 146, 148,
	152, 153, 154, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 168, 169, 176,
	129, 145, 149, 151, 177, 255, 141, 255,
	141, 143, 160, 169, 172, 255, 191, 128,
	159, 162, 174, 128, 151, 151, 159, 162,
	255, 137, 138, 141, 255, 187, 255, 130,
	134, 139, 168, 255, 128, 179, 138, 170,
	176, 255, 147, 255, 128, 182, 128, 141,
	158, 159, 255, 164, 255, 164, 168, 169,
	171, 172, 173, 174, 175, 180, 181, 182,
	183, 185, 186, 187, 188, 189, 190, 191,
	165, 179, 174, 175, 171, 175, 154, 255,
	190, 128, 134, 147, 151, 157, 168, 170,
	182, 184, 188, 128, 129, 131, 132, 134,
	255, 147, 255, 190, 255, 144, 255, 144,
	145, 136, 175, 188, 255, 176, 180, 182,
	255, 189, 255, 161, 186, 129, 154, 166,
	255, 191, 255, 130, 135, 138, 143, 146,
	151, 154, 156, 144, 146, 157, 160, 170,
	175, 161, 169, 128, 129, 130, 131, 133,
	138, 139, 140, 141, 142, 143, 144, 145,
	146, 160, 164, 168, 128, 139, 141, 166,
	168, 186, 188, 189, 191, 255, 142, 143,
	158, 255, 187, 255, 128, 180, 128, 156,
	160, 255, 145, 255, 128, 158, 176, 255,
	139, 255, 128, 157, 160, 255, 144, 132,
	135, 150, 255, 158, 255, 136, 188, 191,
	128, 133, 138, 181, 183, 184, 128, 149,
	160, 185, 128, 131, 133, 134, 140, 147,
	149, 151, 153, 179, 128, 141, 144, 145,
	129, 140, 175, 255, 163, 255, 144, 145,
	146, 147, 148, 149, 154, 155, 156, 157,
	158, 159, 150, 153, 149, 157, 173, 186,
	188, 160, 161, 163, 164, 167, 168, 132,
	134, 149, 157, 186, 139, 140, 191, 255,
	134, 128, 132, 138, 144, 146, 255, 166,
	167, 129, 155, 187, 149, 181, 143, 175,
	137, 169, 131, 140, 255, 128, 129, 255,
	155, 156, 255, 151, 255, 160, 168, 161,
	167, 62, 10, 32, 47, 9, 13, 10,
	32, 9, 13, 10, 47, 10, 32, 33,
	34, 37, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 58, 60, 61, 62, 91,
	93, 95, 97, 101, 105, 110, 111, 112,
	114, 123, 124, 125, 194, 195, 198, 199,
	203, 205, 206, 207, 210, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 233, 234, 237,
	239, 240, 9, 13, 49, 57, 65, 90,
	98, 122, 196, 202, 208, 218, 229, 236,
	10, 32, 9, 13, 10, 34, 48, 57,
	47, 46, 100, 104, 109, 110, 115, 117,
	119, 121, 194, 48, 57, 84, 43, 45,
	46, 90, 43, 45, 90, 48, 57, 48,
	49, 57, 48, 111, 115, 49, 57, 46,
	100, 104, 109, 110, 115, 117, 119, 121,
	194, 48, 57, 46, 100, 104, 109, 110,
	115, 117, 119, 121, 194, 48, 57, 46,
	100, 104, 109, 110, 115, 117, 119, 121,
	194, 48, 57, 45, 46, 100, 104, 109,
	110, 115, 117, 119, 121, 194, 48, 57,
	46, 100, 104, 109, 110, 115, 117, 119,
	121, 194, 48, 57, 45, 61, 61, 126,
	61, 95, 194, 195, 198, 199, 203, 205,
	206, 207, 210, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 233, 234, 237, 239, 240,
	48, 57, 65, 90, 97, 122, 196, 202,
	208, 218, 229, 236, 95, 110, 194, 195,
	198, 199, 203, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 233,
	234, 237, 239, 240, 48, 57, 65, 90,
	97, 122, 196, 202, 208, 218, 229, 236,
	95, 100, 194, 195, 198, 199, 203, 205,
	206, 207, 210, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 233, 234, 237, 239, 240,
	48, 57, 65, 90, 97, 122, 196, 202,
	208, 218, 229, 236, 95, 109, 194, 195,
	198, 199, 203, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 233,
	234, 237, 239, 240, 48, 57, 65, 90,
	97, 122, 196, 202, 208, 218, 229, 236,
	95, 112, 194, 195, 198, 199, 203, 205,
	206, 207, 210, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 233, 234, 237, 239, 240,
	48, 57, 65, 90, 97, 122, 196, 202,
	208, 218, 229, 236, 95, 116, 194, 195,
	198, 199, 203, 205, 206, 207, 210, 212,
	213, 214, 215, 216, 217, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 233,
	234, 237, 239, 240, 48, 57, 65, 90,
	97, 122, 196, 202, 208, 218, 229, 236,
	95, 121, 194, 195, 198, 199, 203, 205,
	206, 207, 210, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 233, 234, 237, 239, 240,
	48, 57, 65, 90, 97, 122, 196, 202,
	208, 218, 229, 236, 95, 109, 110, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 112, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 111, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 114, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 116, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 111, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 116, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 114, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 97, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 98, 122, 196, 202, 208, 218, 229,
	236, 95, 99, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 107, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 97, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 98, 122, 196,
	202, 208, 218, 229, 236, 95, 103, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 101, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 101, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 116, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 117, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236, 95, 114, 194, 195, 198, 199, 203,
	205, 206, 207, 210, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 234, 237, 239,
	240, 48, 57, 65, 90, 97, 122, 196,
	202, 208, 218, 229, 236, 95, 110, 194,
	195, 198, 199, 203, 205, 206, 207, 210,
	212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228,
	233, 234, 237, 239, 240, 48, 57, 65,
	90, 97, 122, 196, 202, 208, 218, 229,
	236,
}

var _flux_single_lengths []byte = []byte{
	0, 2, 2, 2, 1, 1, 1, 2,
	0, 0, 1, 0, 0, 0, 0, 1,
	0, 0, 1, 0, 0, 0, 0, 1,
	0, 0, 1, 9, 9, 1, 1, 3,
	0, 0, 0, 0, 1, 1, 2, 1,
	0, 0, 0, 1, 1, 0, 0, 1,
	0, 0, 0, 1, 27, 0, 0, 1,
	2, 0, 1, 0, 2, 0, 1, 1,
	2, 0, 3, 0, 1, 0, 2, 1,
	1, 0, 1, 5, 2, 1, 0, 0,
	43, 1, 0, 0, 1, 0, 0, 0,
	3, 2, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 0, 4, 1, 0,
	16, 2, 0, 6, 1, 0, 0, 0,
	0, 2, 0, 0, 0, 0, 0, 1,
	9, 0, 1, 1, 0, 0, 0, 3,
	0, 0, 1, 0, 19, 0, 0, 1,
	0, 0, 0, 0, 3, 0, 0, 0,
	0, 0, 1, 0, 19, 0, 0, 0,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6, 17, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 3, 0, 0, 4, 0, 0,
	12, 1, 4, 1, 4, 1, 0, 3,
	2, 2, 2, 1, 1, 1, 0, 2,
	1, 3, 2, 2, 61, 2, 2, 0,
	1, 10, 1, 4, 3, 1, 3, 10,
	10, 10, 11, 10, 2, 2, 1, 31,
	32, 32, 32, 32, 32, 32, 33, 32,
	32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32,
	32,
}

var _flux_range_lengths []byte = []byte{
	0, 0, 0, 0, 0, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 0, 0, 0,
	3, 0, 1, 1, 4, 3, 3, 0,
	1, 1, 2, 2, 4, 2, 3, 5,
	1, 1, 1, 2, 0, 2, 5, 7,
	6, 9, 6, 8, 3, 8, 6, 10,
	3, 7, 3, 7, 5, 6, 4, 4,
	4, 1, 1, 8, 2, 0, 3, 4,
	3, 2, 3, 2, 2, 1, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 4, 2, 3, 1,
	1, 1, 3, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 3, 2, 7,
	0, 0, 1, 5, 2, 1, 1, 1,
	2, 1, 1, 2, 2, 5, 5, 0,
	1, 4, 1, 1, 2, 2, 1, 0,
	1, 0, 1, 1, 3, 1, 3, 2,
	1, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	5, 3, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 1, 4, 1, 0, 5,
	2, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 3, 2, 5, 1, 1, 1,
	1, 0, 3, 0, 2, 3, 1, 0,
	0, 0, 0, 1, 1, 1, 1, 1,
	0, 1, 1, 0, 7, 1, 0, 1,
	0, 1, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 0, 6,
	6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6,
	6,
}

var _flux_index_offsets []int16 = []int16{
	0, 0, 3, 6, 9, 11, 14, 17,
	21, 23, 25, 27, 29, 31, 33, 35,
	37, 39, 41, 43, 45, 47, 49, 51,
	53, 55, 57, 60, 70, 81, 83, 85,
	89, 93, 94, 96, 98, 104, 109, 115,
	117, 119, 121, 124, 128, 134, 137, 141,
	148, 150, 152, 154, 158, 186, 189, 195,
	204, 213, 223, 231, 240, 246, 255, 263,
	275, 281, 289, 296, 304, 311, 318, 325,
	331, 337, 339, 342, 356, 361, 363, 367,
	372, 419, 423, 427, 430, 434, 436, 438,
	440, 446, 452, 457, 460, 463, 466, 468,
	470, 473, 476, 479, 483, 488, 491, 495,
	497, 499, 501, 505, 508, 511, 513, 515,
	518, 521, 524, 526, 529, 532, 540, 544,
	552, 569, 572, 574, 586, 590, 592, 594,
	596, 599, 603, 605, 608, 611, 617, 623,
	625, 636, 641, 644, 647, 650, 653, 655,
	659, 661, 662, 665, 667, 690, 692, 696,
	700, 702, 705, 708, 710, 715, 717, 720,
	722, 724, 726, 729, 731, 752, 754, 756,
	758, 765, 769, 771, 773, 775, 777, 780,
	783, 785, 787, 790, 792, 797, 805, 823,
	829, 832, 834, 836, 839, 841, 844, 846,
	849, 853, 855, 862, 865, 871, 877, 879,
	881, 895, 897, 905, 907, 914, 919, 921,
	925, 928, 931, 934, 937, 940, 943, 945,
	949, 951, 956, 960, 963, 1032, 1036, 1039,
	1041, 1043, 1055, 1057, 1062, 1067, 1070, 1075,
	1087, 1099, 1111, 1124, 1136, 1139, 1142, 1144,
	1182, 1221, 1260, 1299, 1338, 1377, 1416, 1456,
	1495, 1534, 1573, 1612, 1651, 1690, 1729, 1768,
	1807, 1846, 1885, 1924, 1963, 2002, 2041, 2080,
	2119,
}

var _flux_indicies []int16 = []int16{
	2, 3, 1, 4, 6, 5, 9, 10,
	8, 13, 12, 15, 16, 14, 15, 17,
	14, 18, 15, 19, 14, 20, 14, 21,
	14, 22, 14, 23, 14, 24, 14, 26,
	25, 27, 25, 28, 25, 29, 25, 30,
	25, 31, 25, 32, 25, 33, 25, 34,
	25, 35, 25, 36, 25, 37, 25, 38,
	25, 15, 19, 14, 40, 40, 41, 42,
	40, 42, 40, 40, 43, 39, 40, 40,
	41, 42, 40, 42, 40, 40, 43, 44,
	39, 40, 7, 42, 7, 45, 45, 45,
	7, 45, 45, 45, 7, 45, 7, 45,
	45, 7, 7, 7, 7, 7, 7, 45,
	45, 45, 45, 45, 7, 45, 45, 45,
	45, 45, 7, 7, 45, 7, 45, 7,
	45, 7, 7, 45, 7, 7, 7, 45,
	45, 45, 45, 45, 45, 7, 45, 45,
	7, 45, 45, 45, 7, 7, 7, 7,
	7, 7, 7, 45, 45, 7, 45, 7,
	7, 45, 45, 45, 45, 7, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 7, 45, 45, 7, 7, 7, 7,
	7, 7, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 7, 7,
	7, 7, 7, 7, 7, 7, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 7,
	7, 7, 7, 7, 7, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 7, 45,
	45, 45, 45, 45, 45, 45, 7, 45,
	45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 7, 45, 45, 45, 45, 45,
	7, 45, 45, 45, 45, 45, 45, 45,
	7, 7, 7, 7, 7, 7, 7, 45,
	45, 45, 45, 45, 45, 45, 45, 7,
	45, 45, 45, 45, 45, 45, 7, 45,
	45, 45, 45, 45, 45, 7, 7, 7,
	7, 7, 7, 7, 45, 45, 45, 45,
	45, 45, 7, 45, 45, 45, 45, 45,
	7, 45, 7, 45, 45, 7, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 7, 45, 45, 45, 45,
	7, 45, 7, 45, 45, 45, 7, 45,
	45, 45, 45, 7, 73, 74, 75, 76,
	78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 77,
	89, 110, 77, 111, 112, 113, 114, 77,
	89, 89, 7, 45, 45, 45, 7, 45,
	45, 45, 7, 7, 7, 45, 7, 7,
	7, 45, 7, 45, 7, 45, 7, 45,
	7, 7, 7, 7, 7, 45, 7, 7,
	7, 7, 7, 45, 45, 45, 45, 45,
	7, 7, 7, 45, 7, 7, 45, 45,
	45, 7, 7, 45, 45, 7, 7, 7,
	45, 45, 45, 7, 7, 7, 45, 45,
	45, 45, 7, 45, 45, 45, 45, 7,
	45, 45, 7, 7, 7, 7, 45, 45,
	7, 7, 45, 45, 7, 45, 45, 45,
	7, 45, 45, 7, 45, 45, 7, 7,
	45, 45, 7, 45, 45, 7, 7, 7,
	45, 45, 45, 7, 45, 7, 45, 45,
	7, 7, 7, 45, 7, 7, 7, 7,
	7, 7, 7, 45, 45, 45, 45, 7,
	45, 45, 45, 45, 45, 45, 45, 7,
	115, 116, 117, 118, 119, 120, 121, 122,
	123, 77, 124, 125, 126, 127, 128, 129,
	7, 45, 45, 7, 45, 7, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45,
	45, 7, 45, 45, 45, 7, 7, 45,
	45, 7, 7, 45, 45, 45, 7, 7,
	7, 7, 45, 7, 45, 45, 45, 7,
	7, 7, 45, 45, 45, 45, 45, 45,
	7, 45, 45, 45, 45, 45, 7, 45,
	7, 130, 88, 131, 132, 133, 89, 134,
	135, 77, 89, 7, 45, 45, 45, 45,
	7, 7, 7, 45, 7, 7, 45, 45,
	45, 7, 7, 7, 45, 45, 7, 136,
	7, 77, 89, 7, 45, 89, 137, 7,
	89, 7, 45, 77, 138, 77, 139, 140,
	141, 142, 89, 143, 144, 145, 146, 77,
	137, 147, 148, 149, 150, 77, 89, 89,
	89, 7, 7, 45, 7, 7, 7, 45,
	45, 45, 45, 7, 45, 7, 45, 45,
	7, 7, 7, 45, 45, 7, 7, 7,
	7, 7, 45, 45, 7, 45, 45, 7,
	7, 45, 45, 7, 45, 7, 151, 7,
	89, 7, 45, 77, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163,
	89, 164, 165, 166, 167, 168, 89, 7,
	7, 45, 7, 45, 7, 45, 45, 45,
	45, 45, 45, 45, 7, 45, 45, 45,
	7, 45, 7, 7, 45, 45, 7, 7,
	45, 7, 7, 45, 45, 45, 7, 7,
	45, 45, 7, 45, 45, 7, 7, 45,
	45, 45, 45, 45, 7, 169, 170, 171,
	172, 174, 175, 173, 7, 176, 177, 77,
	178, 179, 180, 181, 182, 183, 184, 185,
	77, 89, 186, 187, 188, 189, 7, 45,
	45, 45, 45, 45, 7, 7, 7, 45,
	7, 45, 45, 7, 45, 45, 7, 7,
	45, 45, 45, 7, 7, 45, 45, 45,
	7, 7, 7, 7, 45, 7, 45, 45,
	45, 45, 45, 45, 45, 7, 45, 45,
	7, 45, 45, 45, 45, 45, 7, 77,
	190, 77, 191, 89, 7, 7, 45, 7,
	45, 77, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 89, 7, 7,
	45, 7, 7, 7, 7, 7, 7, 7,
	45, 7, 45, 7, 7, 7, 7, 7,
	7, 45, 45, 45, 45, 45, 7, 7,
	45, 7, 7, 7, 45, 7, 7, 45,
	7, 7, 45, 7, 7, 45, 7, 7,
	45, 77, 89, 7, 203, 7, 89, 7,
	45, 77, 186, 89, 7, 204, 5, 207,
	206, 208, 206, 205, 207, 206, 206, 209,
	2, 3, 1, 211, 210, 212, 8, 213,
	214, 215, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 228, 229, 45,
	230, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 110, 77, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 157, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266,
	210, 223, 45, 45, 89, 89, 173, 5,
	211, 210, 210, 267, 9, 10, 8, 15,
	7, 12, 269, 15, 40, 40, 41, 42,
	40, 42, 40, 40, 43, 271, 270, 273,
	272, 274, 274, 275, 38, 272, 274, 274,
	38, 275, 272, 277, 44, 276, 277, 40,
	40, 44, 276, 15, 40, 40, 41, 42,
	40, 42, 40, 40, 43, 278, 270, 15,
	40, 40, 41, 42, 40, 42, 40, 40,
	43, 279, 270, 15, 40, 40, 41, 42,
	40, 42, 40, 40, 43, 280, 270, 18,
	15, 40, 40, 41, 42, 40, 42, 40,
	40, 43, 281, 270, 15, 40, 40, 41,
	42, 40, 42, 40, 40, 43, 281, 270,
	283, 284, 282, 286, 287, 285, 289, 288,
	45, 240, 241, 110, 77, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 157, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 45,
	45, 45, 89, 89, 173, 7, 45, 291,
	240, 241, 110, 77, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 157, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 45, 45,
	45, 89, 89, 173, 290, 45, 292, 240,
	241, 110, 77, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254,
	255, 157, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 45, 45, 45,
	89, 89, 173, 290, 45, 293, 240, 241,
	110, 77, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255,
	157, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 45, 45, 45, 89,
	89, 173, 290, 45, 294, 240, 241, 110,
	77, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 157,
	256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 45, 45, 45, 89, 89,
	173, 290, 45, 295, 240, 241, 110, 77,
	242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 157, 256,
	257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 45, 45, 45, 89, 89, 173,
	290, 45, 296, 240, 241, 110, 77, 242,
	243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 157, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265,
	266, 45, 45, 45, 89, 89, 173, 290,
	45, 297, 298, 240, 241, 110, 77, 242,
	243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 157, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265,
	266, 45, 45, 45, 89, 89, 173, 290,
	45, 299, 240, 241, 110, 77, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 157, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266,
	45, 45, 45, 89, 89, 173, 290, 45,
	300, 240, 241, 110, 77, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 157, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 45,
	45, 45, 89, 89, 173, 290, 45, 301,
	240, 241, 110, 77, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 157, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 45, 45,
	45, 89, 89, 173, 290, 45, 302, 240,
	241, 110, 77, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254,
	255, 157, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 45, 45, 45,
	89, 89, 173, 290, 45, 303, 240, 241,
	110, 77, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255,
	157, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 45, 45, 45, 89,
	89, 173, 290, 45, 304, 240, 241, 110,
	77, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 157,
	256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 45, 45, 45, 89, 89,
	173, 290, 45, 305, 240, 241, 110, 77,
	242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 157, 256,
	257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 45, 45, 45, 89, 89, 173,
	290, 45, 306, 240, 241, 110, 77, 242,
	243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 157, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265,
	266, 45, 45, 45, 89, 89, 173, 290,
	45, 307, 240, 241, 110, 77, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 157, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266,
	45, 45, 45, 89, 89, 173, 290, 45,
	308, 240, 241, 110, 77, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 157, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 45,
	45, 45, 89, 89, 173, 290, 45, 309,
	240, 241, 110, 77, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 157, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 45, 45,
	45, 89, 89, 173, 290, 45, 310, 240,
	241, 110, 77, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254,
	255, 157, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 45, 45, 45,
	89, 89, 173, 290, 45, 311, 240, 241,
	110, 77, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255,
	157, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 45, 45, 45, 89,
	89, 173, 290, 45, 312, 240, 241, 110,
	77, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 157,
	256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 45, 45, 45, 89, 89,
	173, 290, 45, 313, 240, 241, 110, 77,
	242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 157, 256,
	257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 45, 45, 45, 89, 89, 173,
	290, 45, 314, 240, 241, 110, 77, 242,
	243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 157, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265,
	266, 45, 45, 45, 89, 89, 173, 290,
	45, 315, 240, 241, 110, 77, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 157, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266,
	45, 45, 45, 89, 89, 173, 290, 45,
	316, 240, 241, 110, 77, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 157, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 45,
	45, 45, 89, 89, 173, 290,
}

var _flux_trans_targs []int16 = []int16{
	217, 1, 1, 219, 220, 0, 220, 220,
	3, 3, 222, 220, 4, 220, 220, 223,
	6, 7, 8, 26, 9, 10, 11, 12,
	226, 220, 14, 15, 16, 17, 18, 19,
	20, 227, 22, 23, 24, 25, 220, 220,
	229, 230, 29, 30, 28, 239, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78,
	79, 81, 82, 83, 84, 35, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94,
	95, 33, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 34, 116,
	117, 118, 119, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 137, 138, 139, 140, 141, 142,
	144, 147, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 163,
	165, 166, 167, 168, 169, 50, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179,
	180, 182, 197, 200, 212, 145, 213, 215,
	183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 198, 199,
	201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 214, 220, 217, 218, 218,
	219, 217, 221, 221, 2, 220, 220, 220,
	220, 220, 220, 220, 223, 224, 225, 231,
	220, 236, 237, 238, 220, 220, 240, 242,
	246, 251, 253, 254, 260, 220, 216, 220,
	31, 32, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49,
	51, 52, 80, 120, 136, 143, 146, 148,
	162, 164, 181, 220, 220, 220, 220, 5,
	220, 13, 21, 228, 220, 27, 232, 233,
	234, 235, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 241, 239, 243, 244, 245,
	239, 247, 239, 248, 249, 250, 239, 252,
	239, 239, 255, 256, 257, 258, 259, 239,
	261, 262, 263, 264, 239,
}

var _flux_trans_actions []byte = []byte{
	13, 0, 1, 93, 31, 0, 35, 85,
	0, 1, 135, 83, 0, 87, 77, 129,
	0, 0, 0, 0, 0, 0, 0, 0,
	7, 81, 0, 0, 0, 0, 0, 0,
	0, 7, 0, 0, 0, 0, 15, 79,
	132, 132, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 9, 0, 1,
	96, 11, 0, 1, 0, 23, 39, 41,
	21, 17, 55, 19, 138, 7, 126, 126,
	51, 0, 0, 0, 43, 45, 123, 123,
	123, 123, 123, 123, 123, 47, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 65, 67, 59, 0,
	63, 0, 0, 7, 61, 0, 126, 126,
	126, 126, 69, 37, 27, 73, 25, 33,
	71, 29, 57, 123, 99, 123, 123, 123,
	108, 123, 111, 123, 123, 123, 114, 123,
	105, 102, 123, 123, 123, 123, 123, 117,
	123, 123, 123, 123, 120,
}

var _flux_to_state_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 3, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0,
}

var _flux_from_state_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0,
}

var _flux_eof_trans []int16 = []int16{
	0, 1, 0, 8, 12, 15, 15, 15,
	15, 15, 15, 15, 15, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 15, 40, 40, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8,
	0, 0, 210, 1, 0, 268, 269, 8,
	270, 271, 273, 273, 273, 277, 277, 271,
	271, 271, 271, 271, 283, 286, 289, 8,
	291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291,
	291,
}

const flux_start int = 217
const flux_first_final int = 217
const flux_error int = 0

const flux_en_main int = 217
const flux_en_main_no_regex int = 220

//line scanner.rl:107

func (s *Scanner) init() {

//line scanner.rl:110

//line scanner.rl:111

//line scanner.rl:112

//line scanner.rl:113

//line scanner.rl:114

//line scanner.rl:115

//line scanner.gen.go:992
	{
		s.ts = 0
		s.te = 0
		s.act = 0
	}

//line scanner.rl:116
}

func (s *Scanner) exec(cs int) int {

//line scanner.gen.go:1004
	{
		var _klen int
		var _trans int
		var _acts int
		var _nacts uint
		var _keys int
		if (s.p) == (s.pe) {
			goto _test_eof
		}
		if (cs) == 0 {
			goto _out
		}
	_resume:
		_acts = int(_flux_from_state_actions[(cs)])
		_nacts = uint(_flux_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _flux_actions[_acts-1] {
			case 3:
//line NONE:1
				s.ts = (s.p)

//line scanner.gen.go:1027
			}
		}

		_keys = int(_flux_key_offsets[(cs)])
		_trans = int(_flux_index_offsets[(cs)])

		_klen = int(_flux_single_lengths[(cs)])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + _klen - 1)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + ((_upper - _lower) >> 1)
				switch {
				case (s.data)[(s.p)] < _flux_trans_keys[_mid]:
					_upper = _mid - 1
				case (s.data)[(s.p)] > _flux_trans_keys[_mid]:
					_lower = _mid + 1
				default:
					_trans += int(_mid - int(_keys))
					goto _match
				}
			}
			_keys += _klen
			_trans += _klen
		}

		_klen = int(_flux_range_lengths[(cs)])
		if _klen > 0 {
			_lower := int(_keys)
			var _mid int
			_upper := int(_keys + (_klen << 1) - 2)
			for {
				if _upper < _lower {
					break
				}

				_mid = _lower + (((_upper - _lower) >> 1) & ^1)
				switch {
				case (s.data)[(s.p)] < _flux_trans_keys[_mid]:
					_upper = _mid - 2
				case (s.data)[(s.p)] > _flux_trans_keys[_mid+1]:
					_lower = _mid + 2
				default:
					_trans += int((_mid - int(_keys)) >> 1)
					goto _match
				}
			}
			_trans += _klen
		}

	_match:
		_trans = int(_flux_indicies[_trans])
	_eof_trans:
		(cs) = int(_flux_trans_targs[_trans])

		if _flux_trans_actions[_trans] == 0 {
			goto _again
		}

		_acts = int(_flux_trans_actions[_trans])
		_nacts = uint(_flux_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _flux_actions[_acts-1] {
			case 0:
//line scanner.rl:10
				s.curline++
			case 4:
//line NONE:1
				s.te = (s.p) + 1

			case 5:
//line scanner.rl:47
				s.act = 1
			case 6:
//line scanner.rl:53
				s.act = 3
			case 7:
//line scanner.rl:53
				s.te = (s.p) + 1
				{
					(s.p)--
					(cs) = 220
					goto _again
				}
			case 8:
//line scanner.rl:50
				s.te = (s.p)
				(s.p)--

			case 9:
//line NONE:1
				switch s.act {
				case 1:
					{
						(s.p) = (s.te) - 1
						s.token = token.REGEX
						(s.p)++
						goto _out
					}
				case 3:
					{
						(s.p) = (s.te) - 1
						(s.p)--
						(cs) = 220
						goto _again
					}
				}

			case 10:
//line scanner.rl:58
				s.act = 4
			case 11:
//line scanner.rl:59
				s.act = 5
			case 12:
//line scanner.rl:60
				s.act = 6
			case 13:
//line scanner.rl:61
				s.act = 7
			case 14:
//line scanner.rl:62
				s.act = 8
			case 15:
//line scanner.rl:63
				s.act = 9
			case 16:
//line scanner.rl:64
				s.act = 10
			case 17:
//line scanner.rl:65
				s.act = 11
			case 18:
//line scanner.rl:67
				s.act = 12
			case 19:
//line scanner.rl:68
				s.act = 13
			case 20:
//line scanner.rl:69
				s.act = 14
			case 21:
//line scanner.rl:70
				s.act = 15
			case 22:
//line scanner.rl:72
				s.act = 17
			case 23:
//line scanner.rl:98
				s.act = 42
			case 24:
//line scanner.rl:71
				s.te = (s.p) + 1
				{
					s.token = token.TIME
					(s.p)++
					goto _out
				}
			case 25:
//line scanner.rl:74
				s.te = (s.p) + 1
				{
					s.token = token.ADD
					(s.p)++
					goto _out
				}
			case 26:
//line scanner.rl:75
				s.te = (s.p) + 1
				{
					s.token = token.SUB
					(s.p)++
					goto _out
				}
			case 27:
//line scanner.rl:76
				s.te = (s.p) + 1
				{
					s.token = token.MUL
					(s.p)++
					goto _out
				}
			case 28:
//line scanner.rl:78
				s.te = (s.p) + 1
				{
					s.token = token.MOD
					(s.p)++
					goto _out
				}
			case 29:
//line scanner.rl:79
				s.te = (s.p) + 1
				{
					s.token = token.EQ
					(s.p)++
					goto _out
				}
			case 30:
//line scanner.rl:82
				s.te = (s.p) + 1
				{
					s.token = token.LTE
					(s.p)++
					goto _out
				}
			case 31:
//line scanner.rl:83
				s.te = (s.p) + 1
				{
					s.token = token.GTE
					(s.p)++
					goto _out
				}
			case 32:
//line scanner.rl:84
				s.te = (s.p) + 1
				{
					s.token = token.NEQ
					(s.p)++
					goto _out
				}
			case 33:
//line scanner.rl:85
				s.te = (s.p) + 1
				{
					s.token = token.REGEXEQ
					(s.p)++
					goto _out
				}
			case 34:
//line scanner.rl:86
				s.te = (s.p) + 1
				{
					s.token = token.REGEXNEQ
					(s.p)++
					goto _out
				}
			case 35:
//line scanner.rl:88
				s.te = (s.p) + 1
				{
					s.token = token.ARROW
					(s.p)++
					goto _out
				}
			case 36:
//line scanner.rl:89
				s.te = (s.p) + 1
				{
					s.token = token.LPAREN
					(s.p)++
					goto _out
				}
			case 37:
//line scanner.rl:90
				s.te = (s.p) + 1
				{
					s.token = token.RPAREN
					(s.p)++
					goto _out
				}
			case 38:
//line scanner.rl:91
				s.te = (s.p) + 1
				{
					s.token = token.LBRACK
					(s.p)++
					goto _out
				}
			case 39:
//line scanner.rl:92
				s.te = (s.p) + 1
				{
					s.token = token.RBRACK
					(s.p)++
					goto _out
				}
			case 40:
//line scanner.rl:93
				s.te = (s.p) + 1
				{
					s.token = token.LBRACE
					(s.p)++
					goto _out
				}
			case 41:
//line scanner.rl:94
				s.te = (s.p) + 1
				{
					s.token = token.RBRACE
					(s.p)++
					goto _out
				}
			case 42:
//line scanner.rl:95
				s.te = (s.p) + 1
				{
					s.token = token.COLON
					(s.p)++
					goto _out
				}
			case 43:
//line scanner.rl:96
				s.te = (s.p) + 1
				{
					s.token = token.PIPE
					(s.p)++
					goto _out
				}
			case 44:
//line scanner.rl:97
				s.te = (s.p) + 1
				{
					s.token = token.COMMA
					(s.p)++
					goto _out
				}
			case 45:
//line scanner.rl:101
				s.te = (s.p) + 1

			case 46:
//line scanner.rl:67
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.IDENT
					(s.p)++
					goto _out
				}
			case 47:
//line scanner.rl:68
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.INT
					(s.p)++
					goto _out
				}
			case 48:
//line scanner.rl:70
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.DURATION
					(s.p)++
					goto _out
				}
			case 49:
//line scanner.rl:71
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.TIME
					(s.p)++
					goto _out
				}
			case 50:
//line scanner.rl:72
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.STRING
					(s.p)++
					goto _out
				}
			case 51:
//line scanner.rl:77
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.DIV
					(s.p)++
					goto _out
				}
			case 52:
//line scanner.rl:80
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.LT
					(s.p)++
					goto _out
				}
			case 53:
//line scanner.rl:81
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.GT
					(s.p)++
					goto _out
				}
			case 54:
//line scanner.rl:87
				s.te = (s.p)
				(s.p)--
				{
					s.token = token.ASSIGN
					(s.p)++
					goto _out
				}
			case 55:
//line scanner.rl:102
				s.te = (s.p)
				(s.p)--

			case 56:
//line scanner.rl:68
				(s.p) = (s.te) - 1
				{
					s.token = token.INT
					(s.p)++
					goto _out
				}
			case 57:
//line scanner.rl:70
				(s.p) = (s.te) - 1
				{
					s.token = token.DURATION
					(s.p)++
					goto _out
				}
			case 58:
//line scanner.rl:71
				(s.p) = (s.te) - 1
				{
					s.token = token.TIME
					(s.p)++
					goto _out
				}
			case 59:
//line scanner.rl:77
				(s.p) = (s.te) - 1
				{
					s.token = token.DIV
					(s.p)++
					goto _out
				}
			case 60:
//line NONE:1
				switch s.act {
				case 0:
					{
						(cs) = 0
						goto _again
					}
				case 4:
					{
						(s.p) = (s.te) - 1
						s.token = token.AND
						(s.p)++
						goto _out
					}
				case 5:
					{
						(s.p) = (s.te) - 1
						s.token = token.OR
						(s.p)++
						goto _out
					}
				case 6:
					{
						(s.p) = (s.te) - 1
						s.token = token.NOT
						(s.p)++
						goto _out
					}
				case 7:
					{
						(s.p) = (s.te) - 1
						s.token = token.EMPTY
						(s.p)++
						goto _out
					}
				case 8:
					{
						(s.p) = (s.te) - 1
						s.token = token.IN
						(s.p)++
						goto _out
					}
				case 9:
					{
						(s.p) = (s.te) - 1
						s.token = token.IMPORT
						(s.p)++
						goto _out
					}
				case 10:
					{
						(s.p) = (s.te) - 1
						s.token = token.PACKAGE
						(s.p)++
						goto _out
					}
				case 11:
					{
						(s.p) = (s.te) - 1
						s.token = token.RETURN
						(s.p)++
						goto _out
					}
				case 12:
					{
						(s.p) = (s.te) - 1
						s.token = token.IDENT
						(s.p)++
						goto _out
					}
				case 13:
					{
						(s.p) = (s.te) - 1
						s.token = token.INT
						(s.p)++
						goto _out
					}
				case 14:
					{
						(s.p) = (s.te) - 1
						s.token = token.FLOAT
						(s.p)++
						goto _out
					}
				case 15:
					{
						(s.p) = (s.te) - 1
						s.token = token.DURATION
						(s.p)++
						goto _out
					}
				case 17:
					{
						(s.p) = (s.te) - 1
						s.token = token.STRING
						(s.p)++
						goto _out
					}
				case 42:
					{
						(s.p) = (s.te) - 1
						s.token = token.DOT
						(s.p)++
						goto _out
					}
				}

//line scanner.gen.go:1432
			}
		}

	_again:
		_acts = int(_flux_to_state_actions[(cs)])
		_nacts = uint(_flux_actions[_acts])
		_acts++
		for ; _nacts > 0; _nacts-- {
			_acts++
			switch _flux_actions[_acts-1] {
			case 1:
//line NONE:1
				s.ts = 0

			case 2:
//line NONE:1
				s.act = 0

//line scanner.gen.go:1450
			}
		}

		if (cs) == 0 {
			goto _out
		}
		(s.p)++
		if (s.p) != (s.pe) {
			goto _resume
		}
	_test_eof:
		{
		}
		if (s.p) == (s.eof) {
			if _flux_eof_trans[(cs)] > 0 {
				_trans = int(_flux_eof_trans[(cs)] - 1)
				goto _eof_trans
			}
		}

	_out:
		{
		}
	}

//line scanner.rl:120
	return cs
}
